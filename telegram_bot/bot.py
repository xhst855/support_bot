import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from categorize_bert import categorize_message
from desk import create_ticket, add_comment
from logger import setup_logger
from db import init_db, save_ticket, get_ticket_by_message
from aiogram.exceptions import TelegramAPIError
from case_handler import handle_case

logger = setup_logger()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.chat.type.in_({"group", "supergroup"}), ~F.reply_to_message)
async def handle_group_message(message: types.Message):
    if message.from_user.is_bot:
        return

    logger.info(f"New ticket from group {message.chat.id}: {message.text}")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–µ–π—Å –ø–æ —à–∞–±–ª–æ–Ω—É (txid –∏ —Ç.–¥.)
        case_result = handle_case(message.text)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–µ–π—Å: {case_result['case']}, –¥–µ–π—Å—Ç–≤–∏–µ: {case_result['action']}")

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ –∞–¥—Ä–µ—Å, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç
        await message.reply(case_result["response"])

        # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è BERT'–æ–º
        category = categorize_message(message.text)
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è '{message.text}': {category}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        ticket_id = create_ticket(message.chat.id, message.text, category)

        if ticket_id:
            save_ticket(message.message_id, ticket_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
            await message.reply(f"‚úÖ –¢–∏–∫–µ—Ç ‚Ññ{ticket_id} —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
            logger.info(f"Ticket {ticket_id} created successfully for group chat {message.chat.id}.")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞.")
            logger.error(f"Failed to create ticket for group chat {message.chat.id}.")

    except Exception as e:
        logger.exception(f"Unexpected error in group chat: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç–∏–∫–µ—Ç –¥–ª—è —Ä–µ–ø–ª–∞–µ–≤
@dp.message(F.chat.type.in_({"group", "supergroup"}), F.reply_to_message)
async def handle_reply_message(message: types.Message):
    if message.from_user.is_bot:
        return

    original_message_id = message.reply_to_message.message_id
    ticket_id = get_ticket_by_message(original_message_id)

    if ticket_id:
        logger.info(f"Adding comment to ticket {ticket_id} from message: {message.text}")

        try:
            success = add_comment(ticket_id, message.text)
            if success:
                await message.reply(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç ‚Ññ{ticket_id}.")
                logger.info(f"Comment added to ticket {ticket_id}.")
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
                logger.error(f"Failed to add comment to ticket {ticket_id}.")

        except Exception as e:
            logger.exception(f"Error while adding comment: {e}")
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    else:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("Starting Telegram Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
